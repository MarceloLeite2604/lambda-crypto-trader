AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sam Stack for Crypto Trader
Resources:
  CryptoTrader:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: java11
      Handler: com.github.marceloleite2604.cryptotrader.CryptoRequestHandler::handleRequest
      Timeout: 60
      MemorySize: 512
      CodeUri: ./target/crypto-trader.jar
      AutoPublishAlias: prod
      DeploymentPreference:
        Type: AllAtOnce
      Environment:
        Variables:
          CLIENT_ID: "{{resolve:ssm:/lambda-crypto-trader/client-id}}"
          CLIENT_SECRET: "{{resolve:ssm:/lambda-crypto-trader/client-secret}}"
          EMAIL_HOST: "{{resolve:ssm:/lambda-crypto-trader/email-host}}"
          EMAIL_PASSWORD: "{{resolve:ssm:/lambda-crypto-trader/email-password}}"
          EMAIL_PORT: "{{resolve:ssm:/lambda-crypto-trader/email-port}}"
          EMAIL_RECIPIENTS: "{{resolve:ssm:/lambda-crypto-trader/email-recipients}}"
          EMAIL_USERNAME: "{{resolve:ssm:/lambda-crypto-trader/email-username}}"
  ScheduleDailyAt3AmUtc:
    Type: AWS::Events::Rule
    Properties:
      Description: "Event triggered everyday at 3 AM UTC"
      ScheduleExpression: "cron(0 3 * * ? *)"
      State: "ENABLED"
      Targets:
        -
          Id: "CryptoTraderExecution"
          Arn:
            Fn::Join:
              - ':'
              - - Fn::GetAtt:
                  - "CryptoTrader"
                  - "Arn"
                - "prod"
          # The following input simulates an API Gateway request (mandatory for Spring Lambda handler)
          Input: |-
            {
              "resource": "/",
              "path": "/",
              "httpMethod": "GET",
              "headers": {
                "Content-Type": "application/json"
              },
              "multiValueHeaders": {},
              "queryStringParameters": {},
              "multiValueQueryStringParameters": {},
              "requestContext": {
                "accountId": "123456789012",
                "apiId": "id",
                "authorizer": {
                  "claims": null,
                  "scopes": null
                },
                "domainName": "id.execute-api.us-east-1.amazonaws.com",
                "domainPrefix": "id",
                "extendedRequestId": "request-id",
                "httpMethod": "GET",
                "identity": {
                  "accessKey": null,
                  "accountId": null,
                  "caller": null,
                  "cognitoAuthenticationProvider": null,
                  "cognitoAuthenticationType": null,
                  "cognitoIdentityId": null,
                  "cognitoIdentityPoolId": null,
                  "principalOrgId": null,
                  "sourceIp": "IP",
                  "user": null,
                  "userAgent": "user-agent",
                  "userArn": null,
                  "clientCert": {
                    "clientCertPem": "CERT_CONTENT",
                    "subjectDN": "www.example.com",
                    "issuerDN": "Example issuer",
                    "serialNumber": "a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1",
                    "validity": {
                      "notBefore": "May 28 12:30:02 2019 GMT",
                      "notAfter": "Aug  5 09:36:04 2021 GMT"
                    }
                  }
                },
                "path": "/",
                "protocol": "HTTP/1.1",
                "requestId": "id=",
                "requestTime": "04/Mar/2020:19:15:17 +0000",
                "requestTimeEpoch": 1583349317135,
                "resourceId": null,
                "resourcePath": "/",
                "stage": "$default"
              },
              "pathParameters": null,
              "stageVariables": null,
              "body": "",
              "isBase64Encoded": false
            }
          RetryPolicy:
            MaximumEventAgeInSeconds: 3600
            MaximumRetryAttempts: 2
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::Join:
          - ':'
          - - Fn::GetAtt:
              - "CryptoTrader"
              - "Arn"
            - "prod"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduleDailyAt3AmUtc"
          - "Arn"